# The record system for medical interpretation in a hospital（English only)
### 医療通訳担当者（英語）のための通訳後記（反省録）保管システム
### for PosgreSQL


医療機関のスタッフが医療通訳の現場経験を記録しておき、後学に生かすためのシステムです。


#### 機能１：　対応記録記入（データベースへの書き込み）
以下の情報を記載可能です。(1案件ごとに書き込む方式です)
- 通訳実施者氏名
- 通訳開始日時
- 通訳終了日時
- 依頼者
- 依頼部署
- 外国人患者さんの入外区分
- 外国人患者さんの国籍
- サマリー

~~データベースはSQLite3を使用。同時多発的書き込みに対応するため将来的にはPosgresに変更予定。~~


#### 機能２：　対応記録表の表示（データベースのテーブルを表示）
機能１で書き込んだ内容を確認できます。検索機能あり。そのため例えば「眼科だけの対応記録」を眼科から通訳依頼を受けた直後にささっとおさらいをして現場に入るといった使い方が可能です。その他特定の文言が記載されたレコードだけ絞り込む機能もあり。

JavaScriptのライブラリVue.jsのグリッドコンポーネント機能を借用させていただきました。（中身については目下勉強中）
https://jp.vuejs.org/v2/examples/grid-component.html


#### 機能３：　累積対応時間のビジュアライゼーション（対応時間を月別にスタックバーチャートとして表示）
担当者別に出ます。医療通訳系の資格を取る際現場実習時間の報告とかに使えるかなと。集計したい期間を選択し、Getボタンを押すとpngファイルをダウンロードできます。

matplotlibを使っています。集計にはpandasを使っています。バーチャートの下にデータテーブルを表示させています。
こちらをほぼパクりました。
https://matplotlib.org/examples/pylab_examples/table_demo.html


#### Requirements(すみません、バージョンとか細かいことは省略させてください)
- Python3
- appdirs==1.4.3
- click==6.7
- cycler==0.10.0
- Flask==0.12.2
- flask-heroku==0.1.9
- Flask-SQLAlchemy==2.2
- gunicorn==19.7.1
- itsdangerous==0.24
- Jinja2==2.9.6
- MarkupSafe==1.0
- matplotlib==2.0.2
- numpy==1.12.1
- packaging==16.8
- pandas==0.20.1
- psycopg2==2.7.1
- pyparsing==2.2.0
- python-dateutil==2.6.0
- pytz==2017.2
- six==1.10.0
- SQLAlchemy==1.1.9
- Werkzeug==0.12.2


#### ちょっと工夫が必要だったところ
Vue.jsとJinja2が同じ{{}}mustache記法を採用しているため、バッティングを起こさないよう、Vue.js側にdelimitersを指定してやる必要がありました。
```JavaScript
var demo = new Vue({
  el: '#demo',
  delimiters: ["[[","]]"],
  data: {
    searchQuery: '',
    gridColumns: ['Personnel', 'Start', 'End', 'Client', 'Section', 'Patient', 'Country', 'Summary'],
    gridData: [
    {% for row in rows %}
      { 
        Personnel: '{{ row["personnel"] }}', 
        Start: '{{ row["starttime"] }}', 
        End: '{{ row["endtime"] }}', 
        Client: '{{ row["client"] }}', 
        Section: '{{ row["section"] }}', 
        Patient: '{{ row["patient"] }}', 
        Country: '{{ row["country"] }}',
        Summary: {{ row["summary"].splitlines()|safe }} },
    {% endfor %}
    ]
  }
})
```


##### 改修予定リスト
~~- 機能３で集計期間に対応情報が皆無だった場合Flaskのエラーページに飛んでしまう(functool.reduceのエラー)
が、エラー処理を書き加えてポップアップメッセージ「集計期間にデータはありませんでした。」を出すなどエレガントな対応をしたい。~~ 実装完了

- 機能２の対応記録表で一番必要になるのはサマリーの列だが、左端で列幅が狭いなどやや見にくいので何とかする。

~~- ５人程度の少人数で使用するならばSQLite3で問題ないと思うが、それ以上になるとやはりサーバ型のデータベースが欲しい。近いうちにPosgresバージョンを公開したい。~~